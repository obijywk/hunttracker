<!doctype html>
<html data-theme="{{#if enableDarkMode}}dark{{else}}light{{/if}}">
  <head>
    <title>Puzzles - {{appName}}</title>
    <link rel="icon" type="image/svg+xml" href="static/favicon.svg">
    <link rel="stylesheet" type="text/css" href="static/dataTables.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.6.1/css/buttons.dataTables.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/select2@4.0.12/dist/css/select2.min.css">
    <link rel="stylesheet" type="text/css" href="static/style.css">
    <script type="text/javascript" charset="utf8" src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/buttons/1.6.1/js/buttons.html5.min.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdn.jsdelivr.net/npm/select2@4.0.12/dist/js/select2.min.js"></script>
    <script type="text/javascript" charset="utf8" src="static/twemoji.min.js" crossorigin="anonymous"></script>
  </head>
  <body>
    {{> menuheader puzzles=true }}
    <div class="body-wrapper">
      <div class="puzzle-filters">
        <div class="filter-solved">
          <label>
            <input type="radio" name="solved-filter" value="unsolved">Unsolved
          </label>
          &nbsp;
          <label>
            <input type="radio" name="solved-filter" value="solved">Solved
          </label>
          &nbsp;
          <label>
            <input type="radio" name="solved-filter" value="all">All
          </label>
        </div>
        <div class="filter-tags">
          <select class="tags-select wide-select" name="filteredTags[]" multiple="multiple"></select>
        </div>
      </div>
      <table id="puzzles-table" class="display" style="width: 100%">
        <thead>
          <tr>
            <th>&nbsp;</th>
            <th>Solved</th>
            <th>&nbsp;</th>
            <th>Name</th>
            <th><svg class="icon icon-location"><title>Idle</title><use xlink:href="/static/icons.svg#location"></use></svg></th>
            <th>Answer</th>
            <th><svg class="icon icon-topic"><title>Idle</title><use xlink:href="/static/icons.svg#topic"></use></svg></th>
            <th class="icon-column">&nbsp;</th>
            <th class="icon-column">&nbsp;</th>
            <th class="icon-column">&nbsp;</th>
            <th class="icon-column">&nbsp;</th>
            <th class="icon-column">&nbsp;</th>
            <th><svg class="icon icon-idle"><title>Idle</title><use xlink:href="/static/icons.svg#idle"></use></svg></th>
            <th><svg class="icon icon-tags"><title>Tags</title><use xlink:href="/static/icons.svg#tags"></use></svg></th>
            <th>Solvers</th>
          </tr>
        </thead>
      </table>
    </div>
    <script>
      const colExpand = 0;
      const colSolved = 1;
      const colStatusEmoji = 2;
      const colName = 3;
      const colLocation = 4;
      const colAnswer = 5;
      const colTopic = 6;
      const colPuzzleLink = 7;
      const colChannelLink = 8;
      const colSheetLink = 9;
      const colDrawingLink = 10;
      const colHuddleLink = 11;
      const colIdle = 12;
      const colTags = 13;
      const colSolvers = 14;

      $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
        const selectedTags = $(".tags-select").select2("data");
        if (selectedTags.length === 0) {
          return true;
        }
        const selectedTagNames = new Set(selectedTags.map(o => o.text));

        let anyPositiveTagsSelected = false;
        for (const selectedTagName of selectedTagNames) {
          if (selectedTagName[0] !== "-") {
            anyPositiveTagsSelected = true;
            break;
          }
        }

        if (data[colTags].length === 0) {
          if (selectedTagNames.has("!untagged")) {
            return true;
          }
          if (selectedTagNames.has("-!untagged")) {
            return false;
          }
        }

        let hasPositiveMatch = false;
        let hasNegativeMatch = false;
        for (const tagName of data[colTags].split(" ")) {
          if (selectedTagNames.has(tagName)) {
            hasPositiveMatch = true;
          }
          if (selectedTagNames.has("-" + tagName)) {
            hasNegativeMatch = true;
          }
        }
        if (hasNegativeMatch) {
          return false;
        }
        if (hasPositiveMatch) {
          return true;
        }

        if (anyPositiveTagsSelected) {
          return false;
        }

        return true;
      });

      $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
        const solvedFilterValue = $("input[name='solved-filter']:checked").val();
        if (data[colSolved] == "solved" && solvedFilterValue == "unsolved") {
          return false;
        }
        if (data[colSolved] == "unsolved" && solvedFilterValue == "solved") {
          return false;
        }
        return true;
      });

      function formatDetails(data) {
        let puzzleRow = "";
        if (data.url) {
          puzzleRow = `
            <tr>
              <td class="detail-icon-column"><a href="${data.url}" target="_blank"><svg class="icon icon-link"><use xlink:href="/static/icons.svg#link"></use></svg></a></td>
              <td>Puzzle</td>
              <td><a href="${data.url}" target="_blank">${data.url}</a></td>
            </tr>
          `;
        }
        return `
          <table class="puzzleDetails">
            ${puzzleRow}
            <tr>
              <td class="detail-icon-column"><a href="{{slackUrlPrefix}}${data.id}" target="_blank"><svg class="icon icon-slack"><use xlink:href="/static/icons.svg#slack"></use></svg></a></td>
              <td>Channel</td>
              <td><a href="{{slackUrlPrefix}}${data.id}" target="_blank">#${data.channelName}</a></td>
            </tr>
            <tr>
              <td class="detail-icon-column"><a href="${data.sheetUrl}" target="_blank"><svg class="icon icon-sheet"><use xlink:href="/static/icons.svg#sheet"></use></svg></a></td>
              <td>Sheet</td>
              <td><a href="${data.sheetUrl}" target="_blank">${data.sheetUrl}</a></td>
            </tr>
            <tr>
              <td class="detail-icon-column"><a href="${data.drawingUrl}" target="_blank"><svg class="icon icon-drawing"><use xlink:href="/static/icons.svg#drawing"></use></svg></a></td>
              <td>Drawing</td>
              <td><a href="${data.drawingUrl}" target="_blank">${data.drawingUrl}</a></td>
            </tr>
            <tr>
              <td><svg class="icon icon-people"><use xlink:href="/static/icons.svg#people"></use></svg></td>
              <td>Solvers</td>
              <td>${data.users.map(u => u.name).join(", ")}</td>
            </tr>
            <tr>
              <td><svg class="icon icon-topic"><use xlink:href="/static/icons.svg#topic"></use></svg></td>
              <td>Topic</td>
              <td>${data.channelTopic}</td>
            </tr>
          </table>
        `;
      }

      $(document).ready(function() {
        const table = $("#puzzles-table").DataTable({
          paging: false,
          dom: "Bfrtip",
          autoWidth: false,
          buttons: [
            {
              text: "Refresh",
              action: function(e, dt, node, config) {
                dt.ajax.reload();
              },
            },
            {
              extend: "copy",
              exportOptions: {
                columns: [colName, colAnswer, colTopic, colTags],
              },
            },
            {
              extend: "csv",
              exportOptions: {
                columns: [colName, colAnswer, colTopic, colTags],
              },
            },
            {
              text: "Tag visible...",
              action: function(e, dt, node, config) {
                const puzzleIds = dt.rows({ search: "applied" }).data().map(r => r.id);
                const params = puzzleIds.map(id => "p[]=" + id).join("&");
                window.open("tagger?" + params);
              },
            },
          ],
          ajax: "puzzles/data",
          search: {
            search: "{{initialSearch}}",
            smart: false,
            regex: true,
          },
          searchCols: [
            null, null, null,
            { search: "{{initialSearch}}", smart: false, regex: true },  // name
            { search: "{{initialSearch}}", smart: false, regex: true },  // location
            { search: "{{initialSearch}}", smart: false, regex: true },  // answer
            { search: "{{initialSearch}}", smart: false, regex: true },  // topic
            null, null, null, null, null,
            { search: "{{initialSearch}}", smart: false, regex: true },  // tags
            null,
          ],
          order: [[colName, "asc"]],
          columns: [
            {
              data: null,
              className: "details-control",
              orderable: false,
              searchable: false,
              defaultContent: "",
              createdCell: (td, cellData, row, rowIndex, colIndex) => {
                if (row.complete) {
                  $(td).parent().addClass("complete");
                }
              },
            },
            {
              data: "complete",
              visible: false,
              render: (data, type, row) => {
                if (data) {
                  return "solved";
                }
                return "unsolved";
              },
            },
            {
              data: "puzzleStatusEmoji",
              className: "emoji-column",
              orderable: false,
              searchable: false,
              render: (data, type, row) => {
                if (type === "display") {
                  if (data) {
                    return twemoji.parse(`<span title="${data.description}">${data.unicodeEmoji}</span>`);
                  }
                  return "&nbsp;";
                }
                return data;
              },
            },
            {
              data: "name",
              render: (data, type, row) => {
                if (type === "display") {
                  return `<a href="javascript:void(0);" class="puzzle-name-link">${data}</a>`;
                }
                return data;
              },
            },
            {
              data: "location",
              className: "location",
              render: (data, type, row) => {
                if (type === 'sort') {
                  if (!data) {
                    return "";
                  }
                  return data;
                }
                return data;
              },
            },
            {
              data: "answer",
              className: "answer",
            },
            {
              data: "channelTopic",
              className: "channel-topic",
            },
            {
              data: "url",
              className: "icon-column",
              orderable: false,
              searchable: false,
              render: (data, type, row) => {
                if (type === "display") {
                  if (data) {
                    return `<a href="${data}" target="_blank"><svg class="icon icon-link"><use xlink:href="/static/icons.svg#link"></use></svg></a>`;
                  }
                  return "&nbsp;";
                }
                return data;
              },
            },
            {
              data: "id",
              className: "icon-column",
              orderable: false,
              searchable: false,
              render: (data, type, row) => {
                if (type === "display") {
                  return `<a href="{{slackUrlPrefix}}${data}" target="_blank"><svg class="icon icon-slack"><use xlink:href="/static/icons.svg#slack"></use></svg></a>`;
                }
                return data;
              },
            },
            {
              data: "sheetUrl",
              className: "icon-column",
              orderable: false,
              searchable: false,
              render: (data, type, row) => {
                if (type === "display") {
                  return `<a href="${data}" target="_blank"><svg class="icon icon-sheet"><use xlink:href="/static/icons.svg#sheet"></use></svg></a>`;
                }
                return data;
              },
            },
            {
              data: "drawingUrl",
              className: "icon-column",
              orderable: false,
              searchable: false,
              render: (data, type, row) => {
                if (type === "display") {
                  return `<a href="${data}" target="_blank"><svg class="icon icon-drawing"><use xlink:href="/static/icons.svg#drawing"></use></svg></a>`;
                }
                return data;
              },
            },
            {
              data: "huddleThreadMessageTs",
              className: "icon-column",
              orderable: false,
              searchable: false,
              render: (data, type, row) => {
                if (!data || data.length === 0) {
                  return "";
                }
                if (type === "display") {
                  return `<a href="{{slackHuddleUrlPrefix}}${row.id}" target="_blank"><svg class="icon icon-huddle"><use xlink:href="/static/icons.svg#huddle"></use></svg></a>`;
                }
                return data;
              },
            },
            {
              data: "idleDurationMilliseconds",
              className: "idle-column",
              searchable: false,
              render: (data, type, row) => {
                if (type === "display" || type === "filter") {
                  let v = "";
                  if (data === 0) {
                    v = "n/a";
                  } else {
                    const idleDuration = moment.duration(data);
                    if (idleDuration.asMinutes() < {{minimumIdleMinutes}}) {
                      v = "active";
                    } else {
                      v = Math.floor(idleDuration.asHours()) + "h"
                        + String(idleDuration.minutes()).padStart(2, "0") + "m";
                    }
                  }
                  return `<a href="/puzzleactivity/${row.id}">${v}</a>`;
                }
                return data;
              },
            },
            {
              data: "tags",
              className: "tag-column",
              render: (data, type, row) => {
                return data.map(tag => {
                  return `<a class="tag-link ${tag.name}" href="javascript:void(0);">${tag.name}</a>`;
                }).join(" ");
              },
            },
            {
              data: (row, type, val, meta) => {
                return row.users.map(u => u.name).join(", ");
              },
              visible: false,
              searchable: false,
            },
          ],
        });

        $(".tags-select").select2({
          placeholder: "Filter by tag",
          allowClear: true,
        });
        $(".tags-select").on("change", function() {
          table.draw();
        });
        const initialTags = "{{initialTags}}";
        if (initialTags) {
          const initialTagsArray = initialTags.split(",").filter(t => t.length > 0);
          for (const tag of initialTagsArray) {
            if (!$(".tags-select").find("option[value='" + tag + "']").length) {
              const newOption = new Option(tag, tag, true, true);
              $(".tags-select").append(newOption);
            }
          }
          $(".tags-select").val(initialTagsArray);
          $(".tags-select").trigger("change");
        }

        function expandOrCollapseClickedRow() {
          const tr = $(this).closest("tr");
          const row = table.row(tr);
          if (row.child.isShown()) {
            row.child.hide();
            tr.removeClass("shown");
          } else {
            row.child(formatDetails(row.data())).show();
            tr.addClass("shown");
          }
        }
        $("#puzzles-table tbody").on("click", "td.details-control", expandOrCollapseClickedRow);
        $("#puzzles-table tbody").on("click", "a.puzzle-name-link", expandOrCollapseClickedRow);

        const initialExpandedPuzzleIds = "{{initialExpandedPuzzleIds}}";
        let initialExpandedPuzzleIdsCallback = null;
        if (initialExpandedPuzzleIds.length > 0) {
          initialExpandedPuzzleIdsCallback = () => {
            table.rows().every(i => {
              const row = table.row(i);
              if (initialExpandedPuzzleIds.indexOf(row.data().id) !== -1) {
                row.child(formatDetails(row.data())).show();
                $(row.node()).addClass("shown");
                row.node().scrollIntoView();
              }
            });
          };
        }

        const initialSolvedFilter = "{{initialSolvedFilter}}";
        if (initialSolvedFilter === "unsolved") {
          $("input:radio[name='solved-filter'][value='unsolved']").prop("checked", true);
        } else if (initialSolvedFilter === "solved") {
          $("input:radio[name='solved-filter'][value='solved']").prop("checked", true);
        } else {
          $("input:radio[name='solved-filter'][value='all']").prop("checked", true);
        }

        table.on("xhr", function() {
          const json = table.ajax.json();
          const tagNameSet = new Set(["!untagged", "-!untagged"]);
          for (const puzzle of json.data) {
            for (const tag of puzzle.tags) {
              tagNameSet.add(tag.name);
              tagNameSet.add("-" + tag.name);
            }
          }
          const tagNameArray = Array.from(tagNameSet);
          tagNameArray.sort((a, b) => {
            const aNeg = a[0] === "-";
            const bNeg = b[0] === "-";
            if (aNeg) {
              a = a.substring(1);
            }
            if (bNeg) {
              b = b.substring(1);
            }
            if (a < b) {
              return -1;
            } else if (a > b) {
              return 1;
            } else {
              if (aNeg === true) {
                return 1;
              }
              return -1;
            }
          });
          const tagData = [];
          for (const tag of tagNameArray) {
            if (!$(".tags-select").find("option[value='" + tag + "']").length) {
              const newOption = new Option(tag, tag, false, false);
              $(".tags-select").append(newOption).trigger("change");
            }
          }
          if (initialExpandedPuzzleIdsCallback) {
            table.one("draw", initialExpandedPuzzleIdsCallback);
          }
        });

        $("#puzzles-table tbody").on("click", "a.tag-link", function() {
          const selected = $(".tags-select").val();
          selected.push($(this).text());
          $(".tags-select").val(selected);
          $(".tags-select").trigger("change");
          table.draw();
        });

        $("input[name='solved-filter']").change(function() {
          table.draw();
        });

        window.history.replaceState({}, document.title, "/puzzles");
      });
    </script>
  </body>
</html>
